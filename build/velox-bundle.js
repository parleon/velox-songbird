(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Velox"] = factory();
	else
		root["Velox"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/spark-md5/spark-md5.js":
/*!*********************************************!*\
  !*** ./node_modules/spark-md5/spark-md5.js ***!
  \*********************************************/
/***/ ((module) => {

(function (factory) {
    if (true) {
        // Node/CommonJS
        module.exports = factory();
    } else { var glob; }
}(function (undefined) {

    'use strict';

    /*
     * Fastest md5 implementation around (JKM md5).
     * Credits: Joseph Myers
     *
     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
     * @see http://jsperf.com/md5-shootout/7
     */

    /* this function is much faster,
      so if possible we use it. Some IEs
      are the only ones I know of that
      need the idiotic second function,
      generated by an if clause.  */
    var add32 = function (a, b) {
        return (a + b) & 0xFFFFFFFF;
    },
        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];


    function cmn(q, a, b, x, s, t) {
        a = add32(add32(a, q), add32(x, t));
        return add32((a << s) | (a >>> (32 - s)), b);
    }

    function md5cycle(x, k) {
        var a = x[0],
            b = x[1],
            c = x[2],
            d = x[3];

        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;

        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;

        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;

        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b  = (b << 21 | b >>> 11) + c | 0;

        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
    }

    function md5blk(s) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
        }
        return md5blks;
    }

    function md5blk_array(a) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
        }
        return md5blks;
    }

    function md51(s) {
        var n = s.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk(s.substring(i - 64, i)));
        }
        s = s.substring(i - 64);
        length = s.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
        }
        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);
        return state;
    }

    function md51_array(a) {
        var n = a.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
        }

        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
        // containing the last element of the parent array if the sub array specified starts
        // beyond the length of the parent array - weird.
        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue
        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);

        length = a.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= a[i] << ((i % 4) << 3);
        }

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);

        return state;
    }

    function rhex(n) {
        var s = '',
            j;
        for (j = 0; j < 4; j += 1) {
            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];
        }
        return s;
    }

    function hex(x) {
        var i;
        for (i = 0; i < x.length; i += 1) {
            x[i] = rhex(x[i]);
        }
        return x.join('');
    }

    // In some cases the fast add32 function cannot be used..
    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {
        add32 = function (x, y) {
            var lsw = (x & 0xFFFF) + (y & 0xFFFF),
                msw = (x >> 16) + (y >> 16) + (lsw >> 16);
            return (msw << 16) | (lsw & 0xFFFF);
        };
    }

    // ---------------------------------------------------

    /**
     * ArrayBuffer slice polyfill.
     *
     * @see https://github.com/ttaubert/node-arraybuffer-slice
     */

    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {
        (function () {
            function clamp(val, length) {
                val = (val | 0) || 0;

                if (val < 0) {
                    return Math.max(val + length, 0);
                }

                return Math.min(val, length);
            }

            ArrayBuffer.prototype.slice = function (from, to) {
                var length = this.byteLength,
                    begin = clamp(from, length),
                    end = length,
                    num,
                    target,
                    targetArray,
                    sourceArray;

                if (to !== undefined) {
                    end = clamp(to, length);
                }

                if (begin > end) {
                    return new ArrayBuffer(0);
                }

                num = end - begin;
                target = new ArrayBuffer(num);
                targetArray = new Uint8Array(target);

                sourceArray = new Uint8Array(this, begin, num);
                targetArray.set(sourceArray);

                return target;
            };
        })();
    }

    // ---------------------------------------------------

    /**
     * Helpers.
     */

    function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
            str = unescape(encodeURIComponent(str));
        }

        return str;
    }

    function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length,
           buff = new ArrayBuffer(length),
           arr = new Uint8Array(buff),
           i;

        for (i = 0; i < length; i += 1) {
            arr[i] = str.charCodeAt(i);
        }

        return returnUInt8Array ? arr : buff;
    }

    function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
    }

    function concatenateArrayBuffers(first, second, returnUInt8Array) {
        var result = new Uint8Array(first.byteLength + second.byteLength);

        result.set(new Uint8Array(first));
        result.set(new Uint8Array(second), first.byteLength);

        return returnUInt8Array ? result : result.buffer;
    }

    function hexToBinaryString(hex) {
        var bytes = [],
            length = hex.length,
            x;

        for (x = 0; x < length - 1; x += 2) {
            bytes.push(parseInt(hex.substr(x, 2), 16));
        }

        return String.fromCharCode.apply(String, bytes);
    }

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation.
     *
     * Use this class to perform an incremental md5, otherwise use the
     * static methods instead.
     */

    function SparkMD5() {
        // call reset to init the instance
        this.reset();
    }

    /**
     * Appends a string.
     * A conversion will be applied if an utf8 string is detected.
     *
     * @param {String} str The string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.append = function (str) {
        // Converts the string to utf8 bytes if necessary
        // Then append as binary
        this.appendBinary(toUtf8(str));

        return this;
    };

    /**
     * Appends a binary string.
     *
     * @param {String} contents The binary string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.appendBinary = function (contents) {
        this._buff += contents;
        this._length += contents.length;

        var length = this._buff.length,
            i;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
        }

        this._buff = this._buff.substring(i - 64);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            i,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.reset = function () {
        this._buff = '';
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.prototype.getState = function () {
        return {
            buff: this._buff,
            length: this._length,
            hash: this._hash.slice()
        };
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.setState = function (state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;

        return this;
    };

    /**
     * Releases memory used by the incremental buffer and other additional
     * resources. If you plan to use the instance again, use reset instead.
     */
    SparkMD5.prototype.destroy = function () {
        delete this._hash;
        delete this._buff;
        delete this._length;
    };

    /**
     * Finish the final calculation based on the tail.
     *
     * @param {Array}  tail   The tail (will be modified)
     * @param {Number} length The length of the remaining buffer
     */
    SparkMD5.prototype._finish = function (tail, length) {
        var i = length,
            tmp,
            lo,
            hi;

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(this._hash, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Do the final computation based on the tail and length
        // Beware that the final length may not fit in 32 bits so we take care of that
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._hash, tail);
    };

    /**
     * Performs the md5 hash on a string.
     * A conversion will be applied if utf8 string is detected.
     *
     * @param {String}  str The string
     * @param {Boolean} [raw] True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hash = function (str, raw) {
        // Converts the string to utf8 bytes if necessary
        // Then compute it using the binary function
        return SparkMD5.hashBinary(toUtf8(str), raw);
    };

    /**
     * Performs the md5 hash on a binary string.
     *
     * @param {String}  content The binary string
     * @param {Boolean} [raw]     True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hashBinary = function (content, raw) {
        var hash = md51(content),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation for array buffers.
     *
     * Use this class to perform an incremental md5 ONLY for array buffers.
     */
    SparkMD5.ArrayBuffer = function () {
        // call reset to init the instance
        this.reset();
    };

    /**
     * Appends an array buffer.
     *
     * @param {ArrayBuffer} arr The array to be appended
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.append = function (arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),
            length = buff.length,
            i;

        this._length += arr.byteLength;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
        }

        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            i,
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff[i] << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.reset = function () {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.ArrayBuffer.prototype.getState = function () {
        var state = SparkMD5.prototype.getState.call(this);

        // Convert buffer to a string
        state.buff = arrayBuffer2Utf8Str(state.buff);

        return state;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.setState = function (state) {
        // Convert string to buffer
        state.buff = utf8Str2ArrayBuffer(state.buff, true);

        return SparkMD5.prototype.setState.call(this, state);
    };

    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;

    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;

    /**
     * Performs the md5 hash on an array buffer.
     *
     * @param {ArrayBuffer} arr The array buffer
     * @param {Boolean}     [raw] True to get the raw string, false to get the hex one
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.hash = function (arr, raw) {
        var hash = md51_array(new Uint8Array(arr)),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    return SparkMD5;
}));


/***/ }),

/***/ "./lib/web/channel.ts":
/*!****************************!*\
  !*** ./lib/web/channel.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Channel = void 0;
const interfaces_1 = __webpack_require__(/*! ./interfaces */ "./lib/web/interfaces.ts");
const velox_1 = __webpack_require__(/*! ./velox */ "./lib/web/velox.ts");
class Channel {
    constructor(SNMHandler, RCMHandler, CMUHandler, MBHandler, BlobMount, RTCConfig) {
        this._SCMQueue = [];
        this._active = false;
        this._SNMHandler = SNMHandler;
        this._RCMHandler = RCMHandler;
        this._CMUHandler = CMUHandler;
        this._MBHandler = MBHandler;
        this._BMAccess = BlobMount;
        if (RTCConfig) {
            this._peerConnection = new RTCPeerConnection(RTCConfig);
        }
        else {
            this._peerConnection = new RTCPeerConnection({
                iceServers: [
                    {
                        urls: "stun:stun.1.google.com:19302"
                    }
                ]
            });
        }
    }
    SCMProcessor(msg) {
        const msgStr = JSON.stringify(msg);
        const bytes = new TextEncoder().encode(msgStr);
        const blob = new Blob([bytes], {
            type: "application/json;charset=utf-8"
        });
        blob.arrayBuffer().then((blobData) => {
            if (this._active) {
                this._dataChannel.send(blobData);
            }
            else {
                this._SCMQueue.push(msg);
            }
        });
    }
    RawMessage(ab) {
        this._dataChannel.send(ab);
    }
    executeSCMQueue() {
        while (this._SCMQueue.length > 0) {
            this.SCMProcessor(this._SCMQueue.pop());
        }
    }
    RNMProcessor(message) {
        if (message.Type == interfaces_1.RecievableNestMessageType.StartHandshake) {
            this._peerUUID = message.UUID;
            this._dataChannel = this._peerConnection.createDataChannel("m");
            this._dataChannel.binaryType = "arraybuffer";
            this._dataChannel.onmessage = (ev) => this._onmessageHandler(ev);
            this._dataChannel.onopen = (ev) => this._onOpenHandler(ev);
            this._dataChannel.onclose = (ev) => this._onCloseHandler(ev);
            this._peerConnection.createOffer().then((offer) => {
                this._peerConnection.setLocalDescription(offer);
                const msg = {
                    UUID: this._peerUUID,
                    SDPOffer: offer,
                    Type: interfaces_1.SendableNestMessageType.Offer
                };
                this._SNMHandler(msg);
            });
        }
        else if (message.Type == interfaces_1.RecievableNestMessageType.Offer) {
            this._peerUUID = message.UUID;
            this._peerConnection.ondatachannel = (ev) => {
                this._dataChannel = ev.channel;
                this._dataChannel.binaryType = "arraybuffer";
                this._dataChannel.onmessage = (ev) => this._onmessageHandler(ev);
                this._dataChannel.onopen = (ev) => this._onOpenHandler(ev);
                this._dataChannel.onclose = (ev) => this._onCloseHandler(ev);
            };
            this._peerConnection.setRemoteDescription(new RTCSessionDescription(message.SDPOffer));
            this._peerConnection.createAnswer().then((answer) => {
                this._peerConnection.setLocalDescription(answer);
                const msg = {
                    UUID: this._peerUUID,
                    SDPOffer: answer,
                    Type: interfaces_1.SendableNestMessageType.Answer
                };
                this._SNMHandler(msg);
                this._peerConnection.onicecandidate = ({ candidate }) => {
                    const msg = {
                        UUID: this._peerUUID,
                        Candidate: candidate,
                        Type: interfaces_1.SendableNestMessageType.ICE
                    };
                    this._SNMHandler(msg);
                };
            });
        }
        else if (message.Type == interfaces_1.RecievableNestMessageType.Answer) {
            this._peerConnection.setRemoteDescription(new RTCSessionDescription(message.SDPOffer));
            this._peerConnection.onicecandidate = ({ candidate }) => {
                const msg = {
                    UUID: this._peerUUID,
                    Candidate: candidate,
                    Type: interfaces_1.SendableNestMessageType.ICE
                };
                this._SNMHandler(msg);
            };
        }
        else if (message.Type == interfaces_1.RecievableNestMessageType.ICE) {
            this._peerConnection.addIceCandidate(message.Candidate);
        }
        else {
            console.log("default");
        }
    }
    _onOpenHandler(ev) {
        this._active = true;
        const meta_update = { Peer: this._peerUUID, Update: "Opened" };
        this._CMUHandler(meta_update);
        this.executeSCMQueue();
    }
    _onmessageHandler(ev) {
        const h = (0, velox_1.hashAB)(ev.data);
        if (!this._BMAccess.has(h)) {
            this._BMAccess.set(h, ev.data);
            this._MBHandler({ Hash: h });
        }
        try {
            const jsonString = new TextDecoder().decode(ev.data);
            const msg = JSON.parse(jsonString);
            this._RCMHandler(Object.assign(Object.assign({}, msg), { UUID: this._peerUUID }));
        }
        catch (e) {
        }
    }
    _onCloseHandler(ev) {
        const meta_update = { Peer: this._peerUUID, Update: "Closed" };
        this._CMUHandler(meta_update);
    }
}
exports.Channel = Channel;


/***/ }),

/***/ "./lib/web/interfaces.ts":
/*!*******************************!*\
  !*** ./lib/web/interfaces.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SendableNestMessageType = exports.RecievableNestMessageType = void 0;
var RecievableNestMessageType;
(function (RecievableNestMessageType) {
    RecievableNestMessageType["Initial"] = "IN";
    RecievableNestMessageType["StartHandshake"] = "SH";
    RecievableNestMessageType["Offer"] = "OF";
    RecievableNestMessageType["Answer"] = "AN";
    RecievableNestMessageType["ICE"] = "C";
})(RecievableNestMessageType = exports.RecievableNestMessageType || (exports.RecievableNestMessageType = {}));
var SendableNestMessageType;
(function (SendableNestMessageType) {
    SendableNestMessageType["Initial"] = "IN";
    SendableNestMessageType["Offer"] = "OF";
    SendableNestMessageType["Answer"] = "AN";
    SendableNestMessageType["ICE"] = "C";
})(SendableNestMessageType = exports.SendableNestMessageType || (exports.SendableNestMessageType = {}));


/***/ }),

/***/ "./lib/web/nest.ts":
/*!*************************!*\
  !*** ./lib/web/nest.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Nest = void 0;
class Nest {
    constructor(sockAddr, RNMHandler) {
        this._active = false;
        this._sockAddr = "ws:45.33.74.165:80/nest";
        if (sockAddr !== undefined) {
            this._sockAddr = sockAddr;
        }
        this._ws = new WebSocket(this._sockAddr);
        this._ws.onopen = () => {
            this._active = true;
            console.log("opened connection to nest");
        };
        this._ws.onmessage = (event) => {
            const message = JSON.parse(event.data);
            RNMHandler(message);
        };
        this._ws.onclose = () => {
            console.log("connection with the nest has been closed");
            this._active = false;
        };
        this._ws.onerror = (event) => {
            console.log(event);
            this._ws.close;
        };
    }
    isActive() {
        return this._active;
    }
    SNMProcessor(SNM) {
        const dta = JSON.stringify(SNM);
        this._ws.send(dta);
    }
}
exports.Nest = Nest;


/***/ }),

/***/ "./lib/web/velox.ts":
/*!**************************!*\
  !*** ./lib/web/velox.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hashAB = exports.Velox = void 0;
const channel_1 = __webpack_require__(/*! ./channel */ "./lib/web/channel.ts");
const nest_1 = __webpack_require__(/*! ./nest */ "./lib/web/nest.ts");
const interfaces_1 = __webpack_require__(/*! ./interfaces */ "./lib/web/interfaces.ts");
const SparkMD5 = __webpack_require__(/*! spark-md5 */ "./node_modules/spark-md5/spark-md5.js");
class Velox {
    constructor(socketAddr) {
        this._beacon = new EventTarget();
        this._mountedBlobs = new Map();
        this._blobInfo = new Map();
        this._blobRLookup = new Map();
        this._onChannelOpened = (UUID) => console.log(UUID + " Opened");
        this._onChannelClosed = (UUID) => console.log(UUID + " Closed");
        this._activeChannels = new Map();
        this._messageCallbackMap = new Map();
        this._defaultMessageCallback = (cm) => { console.log(cm); };
        const RCMHandler = (message) => {
            this._beacon.dispatchEvent(new CustomEvent("RCM", { detail: { CM: message } }));
        };
        const SNMHandler = (message) => {
            this._beacon.dispatchEvent(new CustomEvent("SNM", { detail: { SNM: message } }));
        };
        const RNMHandler = (message) => {
            this._beacon.dispatchEvent(new CustomEvent("RNM", { detail: { RNM: message } }));
        };
        const CMUHandler = (message) => {
            this._beacon.dispatchEvent(new CustomEvent("CMU", { detail: { CMU: message } }));
        };
        const MBHandler = (message) => {
            this._beacon.dispatchEvent(new CustomEvent("MB", { detail: { Hash: message.Hash } }));
        };
        this._beacon.addEventListener("MB", (event) => {
            const h = event.detail.Hash;
            if (this._mountedBlobs.has(h) && this._blobInfo.has(h)) {
                this._beacon.dispatchEvent(new CustomEvent("BMC", { detail: { Id: this._blobInfo.get(h).Id, Type: this._blobInfo.get(h).Type, AB: this._mountedBlobs.get(h) } }));
            }
        });
        this._beacon.addEventListener("RNM", (event) => {
            const message = event.detail.RNM;
            if (message.Type == interfaces_1.RecievableNestMessageType.Initial) {
                this._UUID = message.UUID;
            }
            else if (message.Type == interfaces_1.RecievableNestMessageType.StartHandshake || message.Type == interfaces_1.RecievableNestMessageType.Offer) {
                this._activeChannels.set(message.UUID, new channel_1.Channel(SNMHandler, RCMHandler, CMUHandler, MBHandler, this._mountedBlobs));
                this._beacon.addEventListener(message.UUID, (event) => {
                    this._activeChannels.get(message.UUID).RNMProcessor(event.detail.RNM);
                });
                this._beacon.dispatchEvent(new CustomEvent(message.UUID, { detail: { RNM: message } }));
            }
            else if (message.UUID != null) {
                this._beacon.dispatchEvent(new CustomEvent(message.UUID, { detail: { RNM: message } }));
            }
        });
        this._beacon.addEventListener("SNM", (event) => {
            const message = event.detail.SNM;
            if (message.UUID == null) {
                this._nest.SNMProcessor(Object.assign(Object.assign({}, message), { UUID: this._UUID }));
            }
            else {
                this._nest.SNMProcessor(message);
            }
        });
        this._beacon.addEventListener("RCM", (event) => {
            const message = event.detail.CM;
            if (message.BlobRelay != undefined) {
                if (message.BlobRelay == "id") {
                    if (this._blobRLookup.has(message.Body)) {
                        const h = this._blobRLookup.get(message.Body);
                        this.send({ BlobRelay: "h",
                            Body: {
                                Hash: h, Info: this._blobInfo.get(h)
                            }
                        }, [message.UUID]);
                        this.sendBlob(h, [message.UUID]);
                    }
                }
                else if (message.BlobRelay == "h") {
                    if (!this._blobInfo.has(message.Body.Hash)) {
                        this._blobInfo.set(message.Body.Hash, message.Body.Info);
                    }
                    MBHandler({ Hash: message.Body.Hash });
                }
            }
            else {
                const f = this._messageCallbackMap.get(message.Type);
                if (f == undefined) {
                    this._defaultMessageCallback(message);
                }
                else {
                    f(message);
                }
            }
        });
        this._beacon.addEventListener("CMU", (event) => {
            const message = event.detail.CMU;
            if (message.Update == "Opened") {
                this._onChannelOpened(message.Peer);
            }
            else if (message.Update == "Closed") {
                this._onChannelClosed(message.Peer);
            }
        });
        this._nest = new nest_1.Nest(socketAddr, RNMHandler);
    }
    connect(networkID) {
        const message = { Type: interfaces_1.SendableNestMessageType.Initial, Other: networkID };
        const x = setInterval(() => {
            if (this._nest.isActive()) {
                this._beacon.dispatchEvent(new CustomEvent("SNM", { detail: { SNM: message } }));
                clearInterval(x);
            }
        }, 10);
    }
    registerMessage(type, callback) {
        this._messageCallbackMap.set(type, callback);
    }
    registerDefault(callback) {
        this._defaultMessageCallback = callback;
    }
    onchannelopen(callback) {
        this._onChannelOpened = callback;
    }
    onchannelclose(callback) {
        this._onChannelClosed = callback;
    }
    send(cm, users) {
        if (users == undefined || users.length == 0) {
            for (const [key, channel] of this._activeChannels.entries()) {
                channel.SCMProcessor(cm);
            }
        }
        else {
            for (const user of users) {
                const channel = this._activeChannels.get(user);
                channel.SCMProcessor(cm);
            }
        }
    }
    requestBlob(id, users) {
        this.send({ BlobRelay: "id", Body: id }, users);
        return new Promise((resolve) => {
            this._beacon.addEventListener("BMC", (event) => {
                if (event.detail.Id == id) {
                    const b = new Blob([event.detail.AB], { type: event.detail.Type });
                    if (!this._blobRLookup.has(id)) {
                        resolve(b);
                        this.mountBlob(id, b);
                    }
                }
            });
        });
    }
    mountBlob(id, blob) {
        const type = blob.type;
        blob.arrayBuffer().then((ab) => {
            const hash = hashAB(ab);
            this._blobInfo.set(hash, { Id: id, Type: type });
            this._mountedBlobs.set(hash, ab);
            this._blobRLookup.set(id, hash);
        });
    }
    sendBlob(hash, users) {
        if (this._mountedBlobs.has(hash)) {
            const ab = this._mountedBlobs.get(hash);
            if (users == undefined || users.length == 0) {
                for (const [key, channel] of this._activeChannels.entries()) {
                    channel.RawMessage(ab);
                }
            }
            else {
                for (const user of users) {
                    const channel = this._activeChannels.get(user);
                    channel.RawMessage(ab);
                }
            }
        }
    }
}
exports.Velox = Velox;
function hashAB(ab) {
    return SparkMD5.ArrayBuffer.hash(ab, true);
}
exports.hashAB = hashAB;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./lib/web/velox.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,